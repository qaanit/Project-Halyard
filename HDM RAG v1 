{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/qaanit/Project-Halyard/blob/main/HDM%20RAG%20v1%20\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "###Part 1\n",
        "This section covers everything you need to set up your environment, process your PDF files, and load them into a Chroma vector database"
      ],
      "metadata": {
        "id": "snQSJ8GRAQMu"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install -U transformers accelerate bitsandbytes -q\n",
        "\n",
        "# --- 1.1 Install Required Libraries ---\n",
        "# Using -q for a quieter installation\n",
        "!pip install -U pypdf -q\n",
        "!pip install -U chromadb -q\n",
        "!pip install -U sentence-transformers -q\n",
        "!pip install -U langchain -q\n",
        "\n",
        "print(\"✅ All required libraries have been installed.\")\n",
        "\n",
        "# --- Import necessary modules ---\n",
        "import os\n",
        "import chromadb\n",
        "from langchain.text_splitter import RecursiveCharacterTextSplitter\n",
        "from pypdf import PdfReader\n",
        "from sentence_transformers import SentenceTransformer"
      ],
      "metadata": {
        "id": "xBHhPirPF3D2",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "e2fde6ac-472a-4b05-aa41-31ccc61bc04a"
      },
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "✅ All required libraries have been installed.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# ==============================================================================\n",
        "# SECTION 1: SETUP, PDF PROCESSING, AND VECTOR DATABASE POPULATION\n",
        "# ==============================================================================\n",
        "# This script follows Phases 1 and 2 of the project roadmap.\n",
        "# It handles:\n",
        "# 1. Installation of required libraries.\n",
        "# 2. Setting up a directory for your PDF files.\n",
        "# 3. Processing the PDFs: loading, chunking text.\n",
        "# 4. Initializing ChromaDB.\n",
        "# 5. Generating vector embeddings and storing them in ChromaDB.\n",
        "# ==============================================================================\n",
        "\n",
        "# --- 1.2 Set Up Your Data Directory ---\n",
        "# Create a directory to store your PDF files about the HDM model.\n",
        "# In Google Colab, you can upload your files to this directory.\n",
        "PDF_DIRECTORY = \"/content/hdm_pdfs/\"\n",
        "if not os.path.exists(PDF_DIRECTORY):\n",
        "    os.makedirs(PDF_DIRECTORY)\n",
        "    print(f\"Directory created: {PDF_DIRECTORY}\")\n",
        "    print(\"‼️ IMPORTANT: Please upload your PDF files to this directory before proceeding.\")\n",
        "else:\n",
        "    print(f\"Directory already exists: {PDF_DIRECTORY}\")\n",
        "    print(\"Please ensure your PDF files are uploaded here.\")\n"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Directory already exists: /content/hdm_pdfs/\n",
            "Please ensure your PDF files are uploaded here.\n"
          ]
        }
      ],
      "execution_count": 2,
      "metadata": {
        "id": "xIUO4qgE7NjB",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "78708c9d-f263-4079-9def-0cb07e361a4e"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# --- 2.2 Process Your PDFs ---\n",
        "def process_all_pdfs(directory_path):\n",
        "    \"\"\"\n",
        "    Loads all PDF files from a directory, extracts text, and splits it into chunks.\n",
        "\n",
        "    Args:\n",
        "        directory_path (str): The path to the directory containing PDF files.\n",
        "\n",
        "    Returns:\n",
        "        list: A list of text chunks (documents).\n",
        "        list: A list of corresponding metadata for each chunk.\n",
        "    \"\"\"\n",
        "    all_chunks = []\n",
        "    all_metadata = []\n",
        "\n",
        "    # Use a text splitter for consistency\n",
        "    text_splitter = RecursiveCharacterTextSplitter(\n",
        "        chunk_size=1000,  # The size of each chunk in characters\n",
        "        chunk_overlap=150   # The number of characters to overlap between chunks\n",
        "    )\n",
        "\n",
        "    pdf_files = [f for f in os.listdir(directory_path) if f.endswith(\".pdf\")]\n",
        "\n",
        "    if not pdf_files:\n",
        "        print(f\"⚠️ No PDF files found in {directory_path}. Please upload your files.\")\n",
        "        return [], []\n",
        "\n",
        "    print(f\"Found {len(pdf_files)} PDF(s). Starting processing...\")\n",
        "\n",
        "    for pdf_file in pdf_files:\n",
        "        try:\n",
        "            file_path = os.path.join(directory_path, pdf_file)\n",
        "            print(f\"  - Processing {pdf_file}...\")\n",
        "\n",
        "            # Read the PDF\n",
        "            reader = PdfReader(file_path)\n",
        "            pdf_text = \"\"\n",
        "            for page in reader.pages:\n",
        "                pdf_text += page.extract_text() or \"\"\n",
        "\n",
        "            # Split the text into chunks\n",
        "            chunks = text_splitter.split_text(pdf_text)\n",
        "\n",
        "            # Create metadata for each chunk\n",
        "            for i, chunk in enumerate(chunks):\n",
        "                all_chunks.append(chunk)\n",
        "                all_metadata.append({'source': pdf_file, 'chunk_id': i})\n",
        "\n",
        "        except Exception as e:\n",
        "            print(f\"  - ❗️ Error processing {pdf_file}: {e}\")\n",
        "\n",
        "    print(f\"\\n✅ PDF processing complete. Total chunks created: {len(all_chunks)}\")\n",
        "    return all_chunks, all_metadata\n",
        "\n",
        "# Execute the PDF processing function\n",
        "# NOTE: Make sure you have uploaded your PDFs before running this cell.\n",
        "documents, metadatas = process_all_pdfs(PDF_DIRECTORY)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BtrbVcUzAxW2",
        "outputId": "f59114cf-1dbb-4854-de01-ebcaea1bfd3d"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Found 1 PDF(s). Starting processing...\n",
            "  - Processing Football_Basics.pdf...\n",
            "\n",
            "✅ PDF processing complete. Total chunks created: 15\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# --- 2.1 & 2.4 Set Up ChromaDB and Index Data ---\n",
        "def setup_and_populate_chromadb(docs, metadata_list):\n",
        "    \"\"\"\n",
        "    Initializes ChromaDB, generates embeddings for documents, and populates the database.\n",
        "\n",
        "    Args:\n",
        "        docs (list): The list of text chunks.\n",
        "        metadata_list (list): The list of metadata corresponding to the chunks.\n",
        "    \"\"\"\n",
        "    if not docs:\n",
        "        print(\"⚠️ No documents to process for ChromaDB. Halting execution.\")\n",
        "        return None\n",
        "\n",
        "    print(\"\\n--- Setting up ChromaDB and Populating ---\")\n",
        "\n",
        "    # Initialize ChromaDB client. Using a persistent client to save data in the Colab environment.\n",
        "    # This will save the database to a directory named 'chroma_db'\n",
        "    client = chromadb.PersistentClient(path=\"/content/chroma_db\")\n",
        "\n",
        "    # --- 2.3 Generate Embeddings ---\n",
        "    # Choose the embedding model as specified in the roadmap\n",
        "    # This model is lightweight and effective for a wide range of tasks.\n",
        "    print(\"Loading sentence-transformer model 'all-MiniLM-L6-v2'...\")\n",
        "    embedding_model = SentenceTransformer('all-MiniLM-L6-v2')\n",
        "    print(\"✅ Model loaded.\")\n",
        "\n",
        "    print(\"Generating embeddings for all document chunks...\")\n",
        "    # This might take a few minutes depending on the number of documents.\n",
        "    embeddings = embedding_model.encode(docs, show_progress_bar=True)\n",
        "    print(\"✅ Embeddings generated.\")\n",
        "\n",
        "    # Create a ChromaDB collection\n",
        "    # Using get_or_create to avoid errors if the collection already exists\n",
        "    collection_name = \"hdm_collection\"\n",
        "    print(f\"Creating or getting ChromaDB collection: '{collection_name}'\")\n",
        "    collection = client.get_or_create_collection(name=collection_name)\n",
        "\n",
        "    # --- 2.4 Index Data in Chroma ---\n",
        "    # Add the documents, their embeddings, and metadata to the collection.\n",
        "    # We need to create unique IDs for each entry.\n",
        "    ids = [f\"doc_{i}\" for i in range(len(docs))]\n",
        "\n",
        "    print(\"Adding documents to the collection. This may take a moment...\")\n",
        "    collection.add(\n",
        "        embeddings=embeddings,\n",
        "        documents=docs,\n",
        "        metadatas=metadata_list,\n",
        "        ids=ids\n",
        "    )\n",
        "\n",
        "    # Verify the number of items in the collection\n",
        "    count = collection.count()\n",
        "    print(f\"\\n✅ ChromaDB setup complete. Collection '{collection_name}' now contains {count} items.\")\n",
        "    return collection\n",
        "\n",
        "# Execute the ChromaDB setup and population\n",
        "# This will only run if documents were successfully processed.\n",
        "if documents:\n",
        "    hdm_collection = setup_and_populate_chromadb(documents, metadatas)\n",
        "else:\n",
        "    print(\"\\nSkipping ChromaDB setup because no documents were processed.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 347,
          "referenced_widgets": [
            "a7afbbea89a94a5488d31457ab3ac4ab",
            "f0e4eaad8445456bbf180722d8ddef6a",
            "c07605849ed6406b85e78e59c17ecc11",
            "a430e1ac1ffe46f5a03c2d6fe7a60313",
            "e0376c6b48ef4860ad8d6200f5b3ae08",
            "3077c027f0e54a23915be7c1b2262d4f",
            "802c2a0a1cca43e3a3046bf226455a64",
            "743031f41a3b4ea9a284b7c8f1e232b3",
            "c8cbcd4d936d4838909f94606775eb73",
            "c2270e717754479a95c03a704a35ca7e",
            "43a2ff34695e4774b1018297582e1e5f"
          ]
        },
        "id": "1yqPhHllA9Qz",
        "outputId": "a8151f37-f55e-4f85-fcd0-4cdf9f11a399"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "--- Setting up ChromaDB and Populating ---\n",
            "Loading sentence-transformer model 'all-MiniLM-L6-v2'...\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/huggingface_hub/utils/_auth.py:94: UserWarning: \n",
            "The secret `HF_TOKEN` does not exist in your Colab secrets.\n",
            "To authenticate with the Hugging Face Hub, create a token in your settings tab (https://huggingface.co/settings/tokens), set it as secret in your Google Colab and restart your session.\n",
            "You will be able to reuse this secret in all of your notebooks.\n",
            "Please note that authentication is recommended but still optional to access public models or datasets.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "✅ Model loaded.\n",
            "Generating embeddings for all document chunks...\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Batches:   0%|          | 0/1 [00:00<?, ?it/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "a7afbbea89a94a5488d31457ab3ac4ab"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "✅ Embeddings generated.\n",
            "Creating or getting ChromaDB collection: 'hdm_collection'\n",
            "Adding documents to the collection. This may take a moment...\n",
            "\n",
            "✅ ChromaDB setup complete. Collection 'hdm_collection' now contains 15 items.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##SECTION 2: LLM INTEGRATION AND RAG CORE\n",
        "\n",
        "This script follows Phase 3 of the project roadmap.\n",
        " It handles:\n",
        " 1. Installation of the 'transformers' library for the LLM.\n",
        " 2. Loading the Qwen-3 model and its tokenizer.\n",
        " 3. Building the core RAG logic to query the database and generate answers."
      ],
      "metadata": {
        "id": "PAMo93HWaHTC"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# --- 1.1 Install Additional Libraries ---\n",
        "# We need the transformers library from Hugging Face to run the Qwen model,\n",
        "# as well as accelerate and bitsandbytes for memory optimization.\n",
        "#!pip install -U transformers accelerate -q\n",
        "#pip install -U bitsandbytes # Added this line to ensure the latest version is installed\n",
        "\n",
        "print(\"✅ LLM-related libraries have been installed.\")\n",
        "\n",
        "# --- Import necessary modules ---\n",
        "import torch\n",
        "from transformers import AutoModelForCausalLM, AutoTokenizer, BitsAndBytesConfig\n",
        "import chromadb\n",
        "from sentence_transformers import SentenceTransformer\n",
        "\n",
        "# --- 3.1 Set Up Qwen-3 LLM ---\n",
        "# We will load the model and tokenizer from Hugging Face.\n",
        "# To manage memory in Colab, we'll load the model in 4-bit precision.\n",
        "# This significantly reduces the memory footprint.\n",
        "\n",
        "model_name = \"Qwen/Qwen1.5-1.8B-Chat\" # Using a smaller, capable version of Qwen\n",
        "\n",
        "print(f\"Loading tokenizer for '{model_name}'...\")\n",
        "tokenizer = AutoTokenizer.from_pretrained(model_name)\n",
        "print(\"✅ Tokenizer loaded.\")\n",
        "\n",
        "# Define the quantization configuration\n",
        "quantization_config = BitsAndBytesConfig(\n",
        "    load_in_4bit=True,\n",
        "    bnb_4bit_compute_dtype=torch.float16 # Recommended for faster inference\n",
        ")\n",
        "\n",
        "print(f\"Loading model '{model_name}' in 4-bit precision...\")\n",
        "# device_map=\"auto\" will automatically use the GPU if available.\n",
        "model = AutoModelForCausalLM.from_pretrained(\n",
        "    model_name,\n",
        "    torch_dtype=\"auto\",\n",
        "    device_map=\"auto\",\n",
        "    quantization_config=quantization_config # Pass the config object here\n",
        ")\n",
        "print(\"✅ Qwen-3 model loaded successfully.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 168,
          "referenced_widgets": [
            "beaa07c64d714781b7b7df290f3fe06d",
            "90133cc551154fd09c64192e0cbd0daa",
            "53cab321515748b19418ae4a2be695a5",
            "de3cc7fcfb9c4aa8b9bae43716d947e8",
            "f2d5bcf6739649b09ba03b4fd67217f3",
            "6648b457d6fa45e0a36705425e702d07",
            "18a248437f4440679f210d708a397e08",
            "342d6bcc051e4184a8ae7cf45386a9e4",
            "dcba5515498f4f7b9c30483d6731261c",
            "8ebf662cedcd4faaa74faa069c1529ba",
            "4cc5945ea9604107ac58cf268900a1d0",
            "1dd0d19b942a40d0913d7fd1833a0def",
            "05bff505c896416fbe870a52d59b630f",
            "7c523156c3874b3fb7a9c0f1ed09a32b",
            "d54b9ecf24314f0fac687128244c3ded",
            "e9e1a633b6cb40f488726c185a4ad930",
            "23d375504b7f48cea9354bcda8c53b05",
            "42636ec9421f451898c0a1cf4d18f525",
            "2400ff7270824f1cb900b70435adbb9b",
            "4294219fb25342bd9fcf1e51e9bce491",
            "50e832c670674eb48fc5ecb885b6bd00",
            "49f2ce3c15a9411caf0a6dfc125dc6bc"
          ]
        },
        "id": "-FMwWTpyaR4o",
        "outputId": "6c16d703-4593-409c-da5d-24c6ac54b394"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "✅ LLM-related libraries have been installed.\n",
            "Loading tokenizer for 'Qwen/Qwen1.5-1.8B-Chat'...\n",
            "✅ Tokenizer loaded.\n",
            "Loading model 'Qwen/Qwen1.5-1.8B-Chat' in 4-bit precision...\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "model.safetensors:   0%|          | 0.00/3.67G [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "beaa07c64d714781b7b7df290f3fe06d"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "generation_config.json:   0%|          | 0.00/206 [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "1dd0d19b942a40d0913d7fd1833a0def"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "✅ Qwen-3 model loaded successfully.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# --- Re-initialize necessary components from Part 1 ---\n",
        "# This ensures that if you run this cell independently, it can reconnect\n",
        "# to the database and reload the embedding model.\n",
        "\n",
        "print(\"\\n--- Re-initializing database connection and embedding model ---\")\n",
        "try:\n",
        "    # Connect to the existing ChromaDB client\n",
        "    client = chromadb.PersistentClient(path=\"/content/chroma_db\")\n",
        "    hdm_collection = client.get_collection(name=\"hdm_collection\")\n",
        "\n",
        "    # Load the embedding model\n",
        "    embedding_model = SentenceTransformer('all-MiniLM-L6-v2')\n",
        "\n",
        "    print(\"✅ Successfully reconnected to ChromaDB and loaded embedding model.\")\n",
        "except Exception as e:\n",
        "    print(f\"❗️ Error re-initializing: {e}\")\n",
        "    print(\"❗️ Please ensure you have run Part 1 successfully before this cell.\")"
      ],
      "metadata": {
        "id": "kDWJG-86ahit",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "cf5ecd11-303c-48fe-8e57-c61dce6851d1"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "--- Re-initializing database connection and embedding model ---\n",
            "✅ Successfully reconnected to ChromaDB and loaded embedding model.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# --- 3.2 Build the RAG Pipeline ---\n",
        "def ask_hdm_expert(query, k=5):\n",
        "    \"\"\"\n",
        "    Performs the full RAG pipeline: embeds query, retrieves context, and generates an answer.\n",
        "\n",
        "    Args:\n",
        "        query (str): The user's question about the HDM model.\n",
        "        k (int): The number of relevant chunks to retrieve from the database.\n",
        "\n",
        "    Returns:\n",
        "        str: The generated answer from the LLM.\n",
        "    \"\"\"\n",
        "    if 'hdm_collection' not in globals() or 'embedding_model' not in globals():\n",
        "        return \"Error: ChromaDB collection or embedding model not initialized. Please run Part 1.\"\n",
        "\n",
        "    print(f\"\\n🔍 Starting RAG pipeline for query: '{query}'\")\n",
        "\n",
        "    # 1. & 2. Embed the user's query\n",
        "    print(\"  - Step 1: Embedding the query...\")\n",
        "    query_embedding = embedding_model.encode(query)\n",
        "\n",
        "    # 3. Similarity Search in ChromaDB\n",
        "    print(f\"  - Step 2: Retrieving top {k} relevant documents from ChromaDB...\")\n",
        "    results = hdm_collection.query(\n",
        "        query_embeddings=[query_embedding.tolist()],\n",
        "        n_results=k,\n",
        "        include=['documents', 'metadatas'] # Ensure metadata is included\n",
        "    )\n",
        "    retrieved_docs = results['documents'][0]\n",
        "    retrieved_metadatas = results['metadatas'][0]\n",
        "\n",
        "    # Format the retrieved documents into a single context string\n",
        "    context = \"\\n\\n---\\n\\n\".join(retrieved_docs)\n",
        "\n",
        "    # 4. Context Augmentation: Create the prompt for the LLM\n",
        "    print(\"  - Step 3: Building the prompt for the LLM...\")\n",
        "\n",
        "    # MAKE SURE TO CHANGE TEMPLATE BACK TO HDM CONTEXT                                   <-----------------------------------------\n",
        "    prompt_template = f\"\"\"\n",
        "You are an expert research assistant specializing in american football.\n",
        "Answer the following question based *only* on the provided context.\n",
        "If the context does not contain the answer, state that you cannot answer based on the provided information.\n",
        "\n",
        "**Context:**\n",
        "{context}\n",
        "\n",
        "**Question:**\n",
        "{query}\n",
        "\n",
        "**Answer:**\n",
        "\"\"\"\n",
        "\n",
        "    # 5. LLM Generation\n",
        "    print(\"  - Step 4: Generating an answer with Qwen-3...\")\n",
        "\n",
        "    # Use the chat template for better performance with chat-tuned models\n",
        "    # REMEMBER TO CHANGE BACK TO HDM CONTEXT                                          <----------------------------------------------\n",
        "    messages = [\n",
        "        {\"role\": \"system\", \"content\": \"You are a helpful expert on american football.\"},\n",
        "        {\"role\": \"user\", \"content\": prompt_template}\n",
        "    ]\n",
        "\n",
        "    # Set the pad_token to the eos_token if it's not already set\n",
        "    if tokenizer.pad_token is None:\n",
        "        tokenizer.pad_token = tokenizer.eos_token\n",
        "\n",
        "    # Step 4: Generating an answer with Qwen-3...\n",
        "    print(\"  - Step 4: Generating an answer with Qwen-3...\")\n",
        "\n",
        "    # FIX: First, create the formatted prompt string from the chat template.\n",
        "    formatted_prompt = tokenizer.apply_chat_template(\n",
        "        messages,\n",
        "        tokenize=False,\n",
        "        add_generation_prompt=True,\n",
        "    )\n",
        "\n",
        "    # FIX: Second, tokenize the formatted string to get the dictionary of inputs.\n",
        "    model_inputs = tokenizer(\n",
        "        formatted_prompt,\n",
        "        return_tensors=\"pt\"\n",
        "    ).to(model.device)\n",
        "\n",
        "    # Now model_inputs is a dictionary and can be correctly unpacked with **\n",
        "    outputs = model.generate(\n",
        "        **model_inputs,\n",
        "        max_new_tokens=512,\n",
        "        do_sample=True,\n",
        "        temperature=0.7,\n",
        "        top_p=0.95\n",
        "    )\n",
        "\n",
        "    # Adjust the decoding to correctly slice the output tensor\n",
        "    response_text = tokenizer.decode(outputs[0][model_inputs['input_ids'].shape[1]:], skip_special_tokens=True)\n",
        "\n",
        "\n",
        "    print(\"✅ RAG pipeline complete.\")\n",
        "    return {\"answer\": response_text, \"sources\": retrieved_metadatas}\n"
      ],
      "metadata": {
        "id": "CXgE2s5jajBf"
      },
      "execution_count": 14,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# --- Example Usage ---\n",
        "# Now you can ask questions about your documents.\n",
        "# Replace this with any question relevant to your uploaded PDFs.\n",
        "example_query = \"What are the different ways i can score points in football?\"\n",
        "result = ask_hdm_expert(example_query)\n",
        "\n",
        "print(\"\\n\" + \"=\"*50)\n",
        "print(f\"❓ Query: {example_query}\")\n",
        "print(\"\\n\" + \"-\"*50)\n",
        "print(f\"🤖 Answer: {result['answer']}\")\n",
        "print(\"\\n\" + \"-\"*50)\n",
        "print(\"📚 Sources Used by the Model:\")\n",
        "for i, source in enumerate(result['sources']):\n",
        "    print(f\"  Source {i+1}: From '{source['source']}' (Chunk ID: {source['chunk_id']})\")\n",
        "print(\"=\"*50)"
      ],
      "metadata": {
        "id": "VB-eH8SQa2Pc",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "022b85dc-d51a-4207-f5ca-3eda5dbd7c3f"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "🔍 Starting RAG pipeline for query: 'What are the different ways i can score points in football?'\n",
            "  - Step 1: Embedding the query...\n",
            "  - Step 2: Retrieving top 5 relevant documents from ChromaDB...\n",
            "  - Step 3: Building the prompt for the LLM...\n",
            "  - Step 4: Generating an answer with Qwen-3...\n",
            "  - Step 4: Generating an answer with Qwen-3...\n",
            "✅ RAG pipeline complete.\n",
            "\n",
            "==================================================\n",
            "❓ Query: What are the different ways i can score points in football?\n",
            "\n",
            "--------------------------------------------------\n",
            "🤖 Answer: In American football, there are several ways a team can score points:\n",
            "\n",
            "1. Touchdown: A touchdown is defined as reaching the opposing end zone after advancing the ball 10 yards by running with it or throwing it. Once the ball reaches the end zone, the offense earns six points. If a touchdown is scored from the opposite side of the end zone (on the same play as the initial attempt), the offense receives eight points.\n",
            "\n",
            "2. Extra point: After a touchdown, the offense can attempt to score an extra point by attempting to kick a field goal, which involves a two-point conversion. If a field goal is successful, the offense scores two points. If the team fails to score the extra point, it loses possession of the ball.\n",
            "\n",
            "3. Fair catch: The player making the football kick return can decide to catch a punt or kickoff instead of advancing the ball. They must signal for a fair catch by raising their hands in the air and waving them. If the player catches the kickoff, the returner gains 10 yards, while if they catch a punt, it gains no yardage.\n",
            "\n",
            "4. Field goal: A kicker can kick the football above the crossbar and between the uprights of the goalpost to score three points. If the ball is kicked between the uprights, the offense receives three points.\n",
            "\n",
            "5. Forward pass: When a football is thrown by a football player (typically the quarterback) towards the end zone, the receiver must catch it and advance it by running, regardless of whether or not they are knocked down before the throw. If the receiver is knocked down, they still advance the ball, but if they receive it without being knocked down, the offensive team gains four downs.\n",
            "\n",
            "6. Interception: A pass that is caught by a football player on the defense is an interception, which usually results in a loss of possession of the ball.\n",
            "\n",
            "7. Kickoff: When a football player kicks the ball to the other team, the kickoff is the point where a kickoff is made, and the kickoff returner can either run the ball out of the end zone or kneel in the end zone to signal a touchback - a signal to stop the play. If the kickoff returner makes a return without being intercepted, they gain 10 yards. If they intercept the kickoff, the ball is placed on the 20-yard line, where the offense begins play.\n",
            "\n",
            "8. Lateral: A pass thrown backward from the team’s line of scrimmage is a lateral pass, where the football moves backwards\n",
            "\n",
            "--------------------------------------------------\n",
            "📚 Sources Used by the Model:\n",
            "  Source 1: From 'Football_Basics.pdf' (Chunk ID: 1)\n",
            "  Source 2: From 'Football_Basics.pdf' (Chunk ID: 0)\n",
            "  Source 3: From 'Football_Basics.pdf' (Chunk ID: 9)\n",
            "  Source 4: From 'Football_Basics.pdf' (Chunk ID: 4)\n",
            "  Source 5: From 'Football_Basics.pdf' (Chunk ID: 11)\n",
            "==================================================\n"
          ]
        }
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "machine_shape": "hm",
      "gpuType": "A100",
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "accelerator": "GPU",
    "widgets": {
      "application/vnd.jupyter.widget-state+json": {
        "a7afbbea89a94a5488d31457ab3ac4ab": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_f0e4eaad8445456bbf180722d8ddef6a",
              "IPY_MODEL_c07605849ed6406b85e78e59c17ecc11",
              "IPY_MODEL_a430e1ac1ffe46f5a03c2d6fe7a60313"
            ],
            "layout": "IPY_MODEL_e0376c6b48ef4860ad8d6200f5b3ae08"
          }
        },
        "f0e4eaad8445456bbf180722d8ddef6a": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_3077c027f0e54a23915be7c1b2262d4f",
            "placeholder": "​",
            "style": "IPY_MODEL_802c2a0a1cca43e3a3046bf226455a64",
            "value": "Batches: 100%"
          }
        },
        "c07605849ed6406b85e78e59c17ecc11": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_743031f41a3b4ea9a284b7c8f1e232b3",
            "max": 1,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_c8cbcd4d936d4838909f94606775eb73",
            "value": 1
          }
        },
        "a430e1ac1ffe46f5a03c2d6fe7a60313": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_c2270e717754479a95c03a704a35ca7e",
            "placeholder": "​",
            "style": "IPY_MODEL_43a2ff34695e4774b1018297582e1e5f",
            "value": " 1/1 [00:00&lt;00:00,  3.20it/s]"
          }
        },
        "e0376c6b48ef4860ad8d6200f5b3ae08": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "3077c027f0e54a23915be7c1b2262d4f": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "802c2a0a1cca43e3a3046bf226455a64": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "743031f41a3b4ea9a284b7c8f1e232b3": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "c8cbcd4d936d4838909f94606775eb73": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "c2270e717754479a95c03a704a35ca7e": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "43a2ff34695e4774b1018297582e1e5f": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "beaa07c64d714781b7b7df290f3fe06d": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_90133cc551154fd09c64192e0cbd0daa",
              "IPY_MODEL_53cab321515748b19418ae4a2be695a5",
              "IPY_MODEL_de3cc7fcfb9c4aa8b9bae43716d947e8"
            ],
            "layout": "IPY_MODEL_f2d5bcf6739649b09ba03b4fd67217f3"
          }
        },
        "90133cc551154fd09c64192e0cbd0daa": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_6648b457d6fa45e0a36705425e702d07",
            "placeholder": "​",
            "style": "IPY_MODEL_18a248437f4440679f210d708a397e08",
            "value": "model.safetensors: 100%"
          }
        },
        "53cab321515748b19418ae4a2be695a5": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_342d6bcc051e4184a8ae7cf45386a9e4",
            "max": 3673690696,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_dcba5515498f4f7b9c30483d6731261c",
            "value": 3673690696
          }
        },
        "de3cc7fcfb9c4aa8b9bae43716d947e8": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_8ebf662cedcd4faaa74faa069c1529ba",
            "placeholder": "​",
            "style": "IPY_MODEL_4cc5945ea9604107ac58cf268900a1d0",
            "value": " 3.67G/3.67G [00:21&lt;00:00, 53.2MB/s]"
          }
        },
        "f2d5bcf6739649b09ba03b4fd67217f3": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "6648b457d6fa45e0a36705425e702d07": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "18a248437f4440679f210d708a397e08": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "342d6bcc051e4184a8ae7cf45386a9e4": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "dcba5515498f4f7b9c30483d6731261c": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "8ebf662cedcd4faaa74faa069c1529ba": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "4cc5945ea9604107ac58cf268900a1d0": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "1dd0d19b942a40d0913d7fd1833a0def": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_05bff505c896416fbe870a52d59b630f",
              "IPY_MODEL_7c523156c3874b3fb7a9c0f1ed09a32b",
              "IPY_MODEL_d54b9ecf24314f0fac687128244c3ded"
            ],
            "layout": "IPY_MODEL_e9e1a633b6cb40f488726c185a4ad930"
          }
        },
        "05bff505c896416fbe870a52d59b630f": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_23d375504b7f48cea9354bcda8c53b05",
            "placeholder": "​",
            "style": "IPY_MODEL_42636ec9421f451898c0a1cf4d18f525",
            "value": "generation_config.json: 100%"
          }
        },
        "7c523156c3874b3fb7a9c0f1ed09a32b": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_2400ff7270824f1cb900b70435adbb9b",
            "max": 206,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_4294219fb25342bd9fcf1e51e9bce491",
            "value": 206
          }
        },
        "d54b9ecf24314f0fac687128244c3ded": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_50e832c670674eb48fc5ecb885b6bd00",
            "placeholder": "​",
            "style": "IPY_MODEL_49f2ce3c15a9411caf0a6dfc125dc6bc",
            "value": " 206/206 [00:00&lt;00:00, 27.1kB/s]"
          }
        },
        "e9e1a633b6cb40f488726c185a4ad930": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "23d375504b7f48cea9354bcda8c53b05": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "42636ec9421f451898c0a1cf4d18f525": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "2400ff7270824f1cb900b70435adbb9b": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "4294219fb25342bd9fcf1e51e9bce491": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "50e832c670674eb48fc5ecb885b6bd00": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "49f2ce3c15a9411caf0a6dfc125dc6bc": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        }
      }
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}